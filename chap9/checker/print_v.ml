open Printf
open Unix
open Misc
open Verilogast

let rec print_source_text fc source_text = begin
	fprintf fc "//generated by checker at %s\n" (get_time_string );
	List.iter (print_description fc) source_text
end
and print_description fc description = begin
	match description with
	T_description__module_declaration(module_declaration) -> begin
		print_module_declaration fc module_declaration
	end
	| _ -> assert false
end
and print_module_declaration fc module_declaration = begin
	match module_declaration with
	T_module_declaration__1(
		attribute_instance_list,
		module_identifier,
		module_parameter_port_list_opt,
		list_of_ports,
		module_item_list
	) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc "\n";
		fprintf fc "module  %s\n" (get_identifier_string module_identifier);

		print_module_parameter_port_list_opt fc module_parameter_port_list_opt ;

		fprintf fc "(";
		list_iter_with_sep list_of_ports (print_port fc) (fun () -> fprintf fc " ,\n");
		fprintf fc ");\n";
		
		List.iter (print_module_item fc) module_item_list;

		fprintf fc "\n\n\n";
		fprintf fc "endmodule\n\n\n";
	end
end
and print_attribute_instance fc attribute_instance = begin
	fprintf fc "(*";
	begin
		match attribute_instance with
		T_attribute_instance(attr_spec_list) -> begin
			list_iter_with_sep attr_spec_list (print_attr_spec fc) (fun () -> fprintf fc ",")
		end
	end
	;
	fprintf fc "*)\n";
end
and print_attr_spec fc attr_spec =begin
	match attr_spec with
	T_attr_spec ( identifier , expression ) -> begin
		print_identifier fc identifier;
		match expression with
		T_expression_NOSPEC -> fprintf fc " "
		| _ -> print_expression fc expression
	end
end
and print_module_parameter_port_list_opt fc module_parameter_port_list_opt = begin
	match module_parameter_port_list_opt with
	[] -> fprintf fc ""
	| _ -> begin
		fprintf fc "#(\n";
		list_iter_with_sep module_parameter_port_list_opt (print_parameter_declaration_gen fc) (fun () -> fprintf fc ", \n");
		fprintf fc "\n)\n";
	end
end
and print_parameter_declaration_gen fc parameter_declaration_gen = begin
	match parameter_declaration_gen with
	T_parameter_declaration_gen_1(parameter_type_opt,signed_opt,range_opt,param_assignment) -> begin
		fprintf fc " parameter ";
		print_parameter_type_opt fc parameter_type_opt;
		print_signed_opt fc signed_opt;
		print_range_opt fc range_opt;
		print_param_assignment fc param_assignment;
	end
end
and print_parameter_type_opt fc parameter_type_opt = begin
	match parameter_type_opt with
	T_parameter_type__NOSPEC     -> fprintf fc " ";
	| T_parameter_type__INTEGER  -> fprintf fc "integer" 
	| T_parameter_type__REAL     -> fprintf fc "real"
	| T_parameter_type__REALTIME -> fprintf fc "REALTIME"
	| T_parameter_type__TIME     -> fprintf fc "time" 
end
and print_signed_opt fc signed_opt = begin
	match signed_opt with
	T_signed_FALSE  -> fprintf fc " ";
	| T_signed_TRUE -> fprintf fc "signed";
end
and print_range_opt fc range_opt = begin
	match range_opt with
	T_range_NOSPEC   -> fprintf fc " ";
	| T_range(exp1,exp2) -> begin
		fprintf fc "[";
		print_expression fc exp1;
		fprintf fc ":";
		print_expression fc exp2;
		fprintf fc "]";
	end
end 
and print_expression fc expression  = begin
	match expression with
	T_expression_NOSPEC  -> fprintf fc " "
	| T_expression_prim(primary)  -> print_primary fc primary
	| T_expression_op1 (unary_operator,attribute_instance_list,primary) -> begin
		fprintf fc "(";
		print_unary_operator fc unary_operator;
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_primary fc primary;
		fprintf fc ")";
	end
	| T_expression_op2 ( exp1 , binary_operator , attribute_instance_list , exp2 ) -> begin
		fprintf fc "(";
			print_expression fc exp1;
			print_binary_operator fc binary_operator;
			List.iter (print_attribute_instance fc) attribute_instance_list;
			print_expression fc exp2;
		fprintf fc ")";
	end
	|	T_expression_condition(conditional_expression ) -> begin
		print_conditional_expression fc conditional_expression
	end
end
and print_conditional_expression fc conditional_expression  = begin
	match conditional_expression with
	T_conditional_expression ( exp1 , attribute_instance_list , exp2 , exp3 ) -> begin
		fprintf fc "(";
			print_expression fc exp1;
		fprintf fc "?";
			List.iter (print_attribute_instance fc) attribute_instance_list;
			print_expression fc exp2;
		fprintf fc ":";
			print_expression fc exp3;
		fprintf fc ")";
	end
end 
and print_primary fc primary = begin
	fprintf fc "(";
	begin
	match primary with
	T_primary_num ( number ) -> print_number fc number
	| T_primary_id ( hierarchical_identifier ) -> print_hierarchical_identifier fc hierarchical_identifier
	| T_primary_concat ( concatenation  ) -> print_concatenation fc concatenation
	| T_primary_mulcon ( multiple_concatenation ) -> print_multiple_concatenation fc multiple_concatenation
	| T_primary_func ( function_call ) -> print_function_call fc function_call
	| T_primary_sysfunc ( system_function_call  ) -> 
		print_system_function_call fc system_function_call
	| T_primary_mintypmax ( mintypmax_expression ) ->
		print_mintypmax_expression fc mintypmax_expression
	| T_primary_string ( str ) ->
		fprintf fc "\"%s\"" str
	end;
	fprintf fc ")";
end
and print_number fc number = begin
	fprintf fc "(";
	begin
	match number with
	T_number_UNSIGNED_NUMBER ( _ ,_ , i )  -> 
		fprintf fc "%d" i
	| T_number_UNSIGNED_NUMBER_size ( _,_,(i1,i2)) -> 
		fprintf fc "%d'd%d" i1 i2
	| T_number_OCTAL_NUMBER (_,_,(i,str)) ->
		fprintf fc "%d'o%s" i str
	| T_number_BINARY_NUMBER (_,_,(i,str)) -> 
		fprintf fc "%d'b%s" i str
	| T_number_HEX_NUMBER (_,_,(i,str)) -> 
		fprintf fc "%d'h%s" i str
	| T_number_REAL_NUMBER (_,_,str) -> 
		fprintf fc "%s" str
	end;
	fprintf fc ")";
end
and print_identifier fc identifier = begin
	match identifier with
	T_identifier_NOSPEC -> fprintf fc " ";
	| T_identifier ( _ , _ , str) -> fprintf fc "%s" str
end
and print_unary_operator fc unary_operator = begin
	match unary_operator with
	 T_unary_operator_LOGIC_NEG ->
	 	fprintf fc " ! "
	| T_unary_operator_BITWISE_NEG ->
		fprintf fc  " ~ "
	| T_unary_operator_REDUCE_NOR ->
		fprintf fc " ~| "
	| T_unary_operator_REDUCE_NAND ->
		fprintf fc " ~& "
	| T_unary_operator_ADD ->
		fprintf fc " + "
	| T_unary_operator_SUB ->
		fprintf fc " - "
	| T_unary_operator_REDUCE_AND ->
		fprintf fc " & "
	| T_unary_operator_REDUCE_OR -> 
		fprintf fc " | "
	| T_unary_operator_REDUCE_XOR -> 
		fprintf fc " ^ "
	| T_unary_operator_REDUCE_XNOR ->
		fprintf fc " ~^ "
end
and print_binary_operator fc binary_operator = begin
	match binary_operator with
	T_binary_operator_MUL -> 
		fprintf fc " * "
|	T_binary_operator_DIV ->
		fprintf fc " / "
|	T_binary_operator_MOD ->
		fprintf fc " %% "
|	T_binary_operator_EQU2 ->
		fprintf fc " == "
|	T_binary_operator_NEQ2 ->
		fprintf fc " != "
|	T_binary_operator_EQU3 ->
		fprintf fc " === "
|	T_binary_operator_NEQ3 ->
		fprintf fc " !== "
|	T_binary_operator_POWER ->
		fprintf fc " ** "
|	T_binary_operator_LT ->
		fprintf fc " < "
|	T_binary_operator_LE ->
		fprintf fc " <= "
|	T_binary_operator_GT ->
		fprintf fc " > "
|	T_binary_operator_GE ->
		fprintf fc " >= "
|	T_binary_operator_LOGICAL_RIGHTSHIFT ->
		fprintf fc " >> "
|	T_binary_operator_LOGICAL_LEFTSHIFT ->
		fprintf fc " << "
|	T_binary_operator_ARITHMETIC_RIGHTSHIFT ->
		fprintf fc " >>> "
|	T_binary_operator_ARITHMETIC_LEFTSHIFT ->
		fprintf fc " <<< "
|	T_binary_operator_ADD ->
		fprintf fc " + "
|	T_binary_operator_SUB ->
		fprintf fc " - "
|	T_binary_operator_AND ->
		fprintf fc " & "
|	T_binary_operator_OR ->
		fprintf fc " | "
|	T_binary_operator_AND2 -> 
		fprintf fc " && "
|	T_binary_operator_OR2 ->
		fprintf fc " || "
|	T_binary_operator_XOR ->
		fprintf fc " ^ "
|	T_binary_operator_XNOR ->
		fprintf fc " ~^ "
end 
and print_hierarchical_identifier fc hierarchical_identifier = begin
	match hierarchical_identifier with
	T_hierarchical_identifier ( identifier_lsq_expression_rsq_list ) -> begin
		list_iter_with_sep identifier_lsq_expression_rsq_list (print_identifier_lsq_expression_rsq fc) (fun () -> fprintf fc ".");
	end
end
and print_identifier_lsq_expression_rsq fc identifier_lsq_expression_rsq = begin
	match identifier_lsq_expression_rsq with
	T_identifier_lsq_expression_rsq ( identifier , range_expression_list ) -> begin
		print_identifier fc identifier;
		List.iter (print_range_expression fc ) range_expression_list
	end
end
and print_range_expression fc range_expression = begin
	match range_expression with
	T_range_expression_NOSPEC -> 
		fprintf fc " "
	| T_range_expression_1 ( expression ) -> begin
		fprintf fc " [ ";
		print_expression fc expression;
		fprintf fc " ] "
	end
	| T_range_expression_2 ( msb_expression , lsb_expression ) -> begin
		fprintf fc " [ ";
		print_expression fc msb_expression;
		fprintf fc " : ";
		print_expression fc lsb_expression;
		fprintf fc " ] "
	end
	|	T_range_expression_addrange ( base_expression , width_expression ) -> begin
		fprintf fc " [ ";
		print_expression fc base_expression;
		fprintf fc " +: ";
		print_expression fc width_expression;
		fprintf fc " ] "
	end
	| T_range_expression_subrange ( base_expression , width_expression ) -> begin
		fprintf fc " [ ";
		print_expression fc base_expression;
		fprintf fc " -: ";
		print_expression fc width_expression;
		fprintf fc " ] "
	end
end
and print_concatenation fc concatenation = begin
	fprintf fc "{";
	begin
	match concatenation with
	T_concatenation ( expression_list ) -> 
		list_iter_with_sep expression_list (print_expression fc) (fun () -> fprintf fc " , ")
	end ;
	fprintf fc "}";
end
and print_multiple_concatenation fc multiple_concatenation = begin
	match multiple_concatenation with
	T_multiple_concatenation ( expression , concatenation ) -> begin
		fprintf fc "{";
			print_expression fc expression;
			print_concatenation fc concatenation;
		fprintf fc "}";
	end
end
and print_function_call fc function_call = begin
	match function_call with
	T_function_call ( hierarchical_identifier , attribute_instance_list , expression_list ) -> begin
		print_hierarchical_identifier fc hierarchical_identifier;
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc "(";
		list_iter_with_sep expression_list (print_expression fc) (fun () -> fprintf fc " , ");
		fprintf fc ")";
	end
end
and print_system_function_call fc system_function_call = begin
	match system_function_call with
	T_system_function_call ( system_function_identifier , expression_list ) -> begin
		print_system_function_identifier fc system_function_identifier;
		if(isnotempty expression_list) then begin
			fprintf fc "(";
				list_iter_with_sep expression_list (print_expression fc) (fun () -> fprintf fc " , ");
			fprintf fc ")";
		end
	end
end
and print_mintypmax_expression fc mintypmax_expression = begin
	match mintypmax_expression with
	T_mintypmax_expression_NOSPEC -> fprintf fc " "
	| T_mintypmax_expression_1 ( expression ) -> 
		print_expression fc expression
	| T_mintypmax_expression_3 ( exp1 , exp2 , exp3 ) -> begin
		print_expression fc exp1;
		fprintf fc " : ";
		print_expression fc exp2;
		fprintf fc " : ";
		print_expression fc exp3
	end
end
and print_system_function_identifier fc system_function_identifier = begin
	match system_function_identifier with
	T_system_function_identifier ( _ , _ , str ) -> 
		fprintf fc "%s" str
end
and print_param_assignment fc param_assignment = begin
	match param_assignment with
	T_param_assignment ( identifier , mintypmax_expression ) -> begin
		print_identifier fc identifier;
		fprintf fc " = " ;
		print_mintypmax_expression fc mintypmax_expression
	end
end
and print_port fc port = begin
	match port with
	T_port_exp ( identifier , port_expression ) -> begin
		fprintf fc " ." ;
		print_identifier fc identifier;
		fprintf fc "(" ;
		print_port_expression fc port_expression;
		fprintf fc ") " ;
	end
	| T_port_net ( io_type , netreg_type , signed , range , port_expression , expression )  -> begin
		print_io_type fc io_type;
		fprintf fc " ";
		print_netreg_type fc netreg_type;
		fprintf fc " ";
		print_range fc range;
		fprintf fc " ";
		print_port_expression fc port_expression;
		match expression with
		T_expression_NOSPEC -> fprintf fc " "
		| _ -> begin
			fprintf fc " = " ;
			print_expression fc expression
		end
	end
end
and print_port_expression fc port_expression = begin
	match port_expression with
	T_port_expression ( port_reference_list ) -> begin
		match port_reference_list with
		[port_reference] -> print_port_reference fc port_reference
		| hd::tl -> list_iter_with_sep port_reference_list (print_port_reference fc) (fun () -> fprintf fc " , ")
		| _ -> assert false
	end
end
and print_netreg_type fc netreg_type = begin
	match netreg_type with
	T_netreg_type__NOSPEC      -> fprintf fc " ";
	| T_netreg_type__KEY_SUPPLY0 -> fprintf fc " supply0 ";	
	| T_netreg_type__KEY_SUPPLY1 -> fprintf fc " supply1 ";	
	| T_netreg_type__KEY_TRI		 -> fprintf fc " tri ";	
	| T_netreg_type__KEY_TRIAND	 -> fprintf fc " triand ";	
	| T_netreg_type__KEY_TRIOR	 -> fprintf fc " trior ";	
	| T_netreg_type__KEY_TRI0		 -> fprintf fc " tri0 ";	
	| T_netreg_type__KEY_TRI1		 -> fprintf fc " tri1 ";	
	| T_netreg_type__KEY_UWIRE	 -> fprintf fc " uwire ";	
	| T_netreg_type__KEY_WIRE		 -> fprintf fc " wire ";	
	| T_netreg_type__KEY_WAND		 -> fprintf fc " wand ";		
	| T_netreg_type__KEY_WOR		 -> fprintf fc " wor ";	
	| T_netreg_type__KEY_REG		 -> fprintf fc " reg ";	
	| T_netreg_type__KEY_INTEGER -> fprintf fc " integer ";	
	| T_netreg_type__KEY_TIME		 -> fprintf fc " time ";	
end
and print_range fc range = begin
	match range with
	T_range_NOSPEC   -> fprintf fc " ";
	| T_range(exp1,exp2) -> begin
		fprintf fc "[";
		print_expression fc exp1;
		fprintf fc ":";
		print_expression fc exp2;
		fprintf fc "]"
	end
end
and print_port_reference fc port_reference = begin
	match port_reference with
	T_port_reference ( identifier , range_expression ) -> begin
		print_identifier fc identifier ;
		print_range_expression fc range_expression
	end
end
and print_module_item fc module_item = begin
	match module_item with
	T_module_item__port_declaration ( port_declaration ) -> begin
		print_port_declaration fc port_declaration;
		fprintf fc " ;\n"
	end
	| T_module_item__generate_region ( generate_region )  -> 
		print_generate_region fc generate_region 
	| T_module_item__specify_block ( specify_block )  -> begin
		assert false
	end
	| T_module_item__parameter_declaration ( attribute_instance_list , parameter_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_parameter_declaration fc parameter_declaration;
		fprintf fc ";\n";
	end
	| T_module_item__specparam_declaration ( attribute_instance_list , specparam_declaration ) -> begin
		assert false
	end
	| T_module_item__net_declaration  ( attribute_instance_list , net_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_net_declaration fc net_declaration
	end
	| T_module_item__reg_declaration ( attribute_instance_list , reg_declaration  ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_reg_declaration fc reg_declaration
	end
	| T_module_item__integer_declaration ( attribute_instance_list , integer_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_integer_declaration fc integer_declaration
	end
	| T_module_item__real_declaration ( attribute_instance_list , real_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_real_declaration fc real_declaration
	end
	| T_module_item__time_declaration ( attribute_instance_list , time_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_time_declaration fc time_declaration
	end
	| T_module_item__realtime_declaration ( attribute_instance_list , realtime_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_realtime_declaration fc realtime_declaration
	end
	| T_module_item__event_declaration ( attribute_instance_list , event_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_event_declaration fc event_declaration 
	end
	| T_module_item__genvar_declaration ( attribute_instance_list , genvar_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_genvar_declaration fc genvar_declaration
	end
	| T_module_item__task_declaration ( attribute_instance_list , task_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_task_declaration fc task_declaration
	end
	| T_module_item__function_declaration  ( attribute_instance_list , function_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_function_declaration fc function_declaration
	end
	| T_module_item__local_parameter_declaration ( attribute_instance_list , local_parameter_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_local_parameter_declaration fc local_parameter_declaration;
		fprintf fc ";\n"
	end
	| T_module_item__parameter_override ( attribute_instance_list , defparam_assignment_list ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_parameter_override fc defparam_assignment_list
	end
	| T_module_item__continuous_assign  ( attribute_instance_list , continuous_assign ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_continuous_assign fc continuous_assign
	end
	| T_module_item__gate_instantiation ( attribute_instance_list , gate_instantiation ) -> begin
		assert false
	end
	| T_module_item__udp_instantiation ( attribute_instance_list , udp_instantiation ) -> begin	
		assert false
	end
	| T_module_item__module_instantiation  ( attribute_instance_list , module_instantiation ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_module_instantiation fc module_instantiation
	end
	| T_module_item__initial_construct ( attribute_instance_list , initial_construct ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_initial_construct fc initial_construct
	end
	| T_module_item__always_construct ( attribute_instance_list , always_construct ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_always_construct fc always_construct
	end
	| T_module_item__loop_generate_construct ( attribute_instance_list , loop_generate_construct ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_loop_generate_construct fc loop_generate_construct 
	end
	| T_module_item__conditional_generate_construct ( attribute_instance_list , conditional_generate_construct ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_conditional_generate_construct fc conditional_generate_construct
	end
end
and print_port_declaration fc port_declaration = begin
	match port_declaration with
	T_port_declaration__inout_declaration ( attribute_instance_list , inout_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_inout_declaration fc inout_declaration
	end
	| T_port_declaration__input_declaration ( attribute_instance_list , input_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_input_declaration fc input_declaration
	end
	| T_port_declaration__output_declaration ( attribute_instance_list , output_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_output_declaration fc output_declaration
	end
end
and print_inout_declaration fc inout_declaration = begin
	match inout_declaration with
	T_inout_declaration ( net_type , signed , range , identifier_list ) -> begin
		fprintf fc "  inout ";
		print_net_type fc net_type;
		fprintf fc " ";
		print_signed_opt fc signed;
		fprintf fc " ";
		print_range fc range;
		fprintf fc " ";
		list_iter_with_sep identifier_list (print_identifier fc) (fun () -> fprintf fc ",")
	end
end
and print_input_declaration fc input_declaration = begin
	match input_declaration with
	T_input_declaration ( net_type , signed , range , identifier_list ) -> begin
		fprintf fc "  input ";
		print_net_type fc net_type;
		fprintf fc " ";
		print_signed_opt fc signed;
		fprintf fc " ";
		print_range fc range;
		fprintf fc " ";
		list_iter_with_sep identifier_list (print_identifier fc) (fun () -> fprintf fc ",")
	end
end
and print_output_declaration fc output_declaration = begin
	match output_declaration with
	T_output_declaration_net ( net_type , signed , range , identifier_list ) -> begin
		fprintf fc "  output ";
		print_net_type fc net_type;
		fprintf fc " ";
		print_signed_opt fc signed;
		fprintf fc " ";
		print_range fc range;
		fprintf fc " ";
		list_iter_with_sep identifier_list (print_identifier fc) (fun () -> fprintf fc ",")
	end
	|T_output_declaration_reg ( signed , range , port_identifier_equ1_expression_opt_list ) -> begin
		fprintf fc "  output reg ";
		print_signed_opt fc signed;
		fprintf fc " ";
		print_range fc range;
		fprintf fc " ";
		list_iter_with_sep port_identifier_equ1_expression_opt_list (print_port_identifier_equ1_expression_opt fc)  (fun () -> fprintf fc ",")
	end
	|T_output_declaration_var ( output_variable_type , port_identifier_equ1_expression_opt_list ) -> begin
		fprintf fc "  output ";
		print_output_variable_type fc output_variable_type;
		fprintf fc " ";
		list_iter_with_sep port_identifier_equ1_expression_opt_list (print_port_identifier_equ1_expression_opt fc)  (fun () -> fprintf fc ",")
	end
end
and print_port_identifier_equ1_expression_opt fc port_identifier_equ1_expression_opt = begin
	match port_identifier_equ1_expression_opt with
	T_port_identifier_equ1_expression_opt ( port_identifier , equ1_expression_opt ) -> begin
		print_identifier fc port_identifier ;
		match equ1_expression_opt with
		T_expression_NOSPEC -> fprintf fc ""
		| _ -> begin
			fprintf fc " = ";
			print_expression fc equ1_expression_opt
		end
	end
end
and	print_output_variable_type fc output_variable_type = begin
	match output_variable_type with
	T_output_variable_type_INTEGER -> fprintf fc " integer "
	| T_output_variable_type_TIME  -> fprintf fc " time "
end
and print_net_type fc net_type = begin
	match net_type with
	T_net_type_NOSPEC          -> fprintf fc "";      
	| T_net_type__KEY_SUPPLY0  -> fprintf fc " supply0 ";       
	| T_net_type__KEY_SUPPLY1  -> fprintf fc " supply1 ";         
	| T_net_type__KEY_TRI      -> fprintf fc " tri     ";    
	| T_net_type__KEY_TRIAND   -> fprintf fc " triand  ";      
	| T_net_type__KEY_TRIOR    -> fprintf fc " trior   ";      
	| T_net_type__KEY_TRI0     -> fprintf fc " tri0    ";     
	| T_net_type__KEY_TRI1     -> fprintf fc " tri1    ";    
	| T_net_type__KEY_UWIRE    -> fprintf fc " uwire   ";      
	| T_net_type__KEY_WIRE     -> fprintf fc " wire    ";      
	| T_net_type__KEY_WAND     -> fprintf fc " wand    ";       
	| T_net_type__KEY_WOR      -> fprintf fc " wor     ";     
end
and print_generate_region fc generate_region  = begin
	match generate_region with
	T_generate_region ( module_item_list ) -> begin
		List.iter (print_module_item fc) module_item_list
	end
end
and print_parameter_declaration fc parameter_declaration = begin
	match parameter_declaration with
	T_parameter_declaration_1 ( signed , range , param_assignment_list ) -> begin
		fprintf fc " parameter ";
		print_signed_opt fc signed;
		print_range fc range;
		list_iter_with_sep param_assignment_list (print_param_assignment fc) (fun () -> fprintf fc " , ");
	end
	| T_parameter_declaration_2 ( parameter_type , param_assignment_list ) -> begin
		fprintf fc " parameter ";
		print_parameter_type fc parameter_type;
		list_iter_with_sep param_assignment_list (print_param_assignment fc) (fun () -> fprintf fc " , ");
	end
end
and print_parameter_type fc parameter_type = begin
	match parameter_type with
	T_parameter_type__NOSPEC     -> fprintf fc "";  
	| T_parameter_type__INTEGER  -> fprintf fc " integer  "; 
	| T_parameter_type__REAL     -> fprintf fc " real     ";  
	| T_parameter_type__REALTIME -> fprintf fc " realtime ";  
	| T_parameter_type__TIME     -> fprintf fc " time     "; 
end
and print_net_declaration fc net_declaration = begin	
	match net_declaration with
	  T_net_declaration_net_type3 ( net_type , drive_strength , vectored_scalared , signed , range , delay3 , net_identifier_dimension_list_list ) -> begin
			print_net_type fc net_type ;
			fprintf fc " ";
			print_drive_strength fc drive_strength;
			fprintf fc " ";
			print_vectored_scalared fc vectored_scalared;
			fprintf fc " ";
			print_signed_opt fc signed;
			fprintf fc " ";
			print_range fc range;
			fprintf fc " ";
			print_delay3 fc delay3;
			fprintf fc " ";
			list_iter_with_sep net_identifier_dimension_list_list (print_net_identifier_dimension_list fc) (fun () -> fprintf fc " , ");
			fprintf fc " ;\n";
		end
	| T_net_declaration_net_type4 ( net_type , drive_strength , vectored_scalared , signed , range , delay3 , net_decl_assignment_list ) -> begin
			print_net_type fc net_type ;
			fprintf fc " ";
			print_drive_strength fc drive_strength;
			fprintf fc " ";
			print_vectored_scalared fc vectored_scalared;
			fprintf fc " ";
			print_signed_opt fc signed;
			fprintf fc " ";
			print_range fc range;
			fprintf fc " ";
			print_delay3 fc delay3;
			fprintf fc " ";
			list_iter_with_sep net_decl_assignment_list (print_net_decl_assignment fc) (fun () -> fprintf fc " , ");
			fprintf fc " ;\n";
	end
	| _ -> assert false
end
and print_drive_strength fc drive_strength = begin
	match drive_strength with
	T_drive_strength_NOSPEC -> fprintf fc ""
	| T_drive_strength ( strength1 , strength2 ) -> begin
		fprintf fc " ( ";
		print_strength fc strength1;
		fprintf fc " , ";
		print_strength fc strength2;
		fprintf fc " ) ";
	end
end
and print_strength fc strength = begin
	match strength with
	  KEY_HIGHZ0  -> fprintf fc " highz0  "; 
	| KEY_HIGHZ1  -> fprintf fc " highz1  ";
	| KEY_SUPPLY0	-> fprintf fc " supply0	";  
	| KEY_STRONG0	-> fprintf fc " strong0	";
	| KEY_PULL0	  -> fprintf fc " pull0	  ";	 
	| KEY_WEAK0   -> fprintf fc " weak0   ";
	|	KEY_SUPPLY1	-> fprintf fc " supply1	"; 
	| KEY_STRONG1	-> fprintf fc " strong1	"; 
	| KEY_PULL1		-> fprintf fc " pull1		";  
	| KEY_WEAK1   -> fprintf fc " weak1   "; 
end
and print_vectored_scalared fc vectored_scalared = begin
	match vectored_scalared with
	T_vectored_scalared_NOSPEC    -> fprintf fc ""
	|T_vectored_scalared_vectored -> fprintf fc " vectored "; 
	|T_vectored_scalared_scalared -> fprintf fc " scalared ";
end
and print_delay3 fc delay3 = begin
	match delay3 with
	T_delay3_NOSPEC -> fprintf fc ""
	| T_delay3_1  (  delay_value ) -> begin
			fprintf fc " # ";
			print_delay_value fc delay_value;
		end
	| T_delay3_minmax1 ( mintypmax_expression ) -> 
			fprintf fc " # ( ";
			print_mintypmax_expression fc mintypmax_expression;
			fprintf fc " ) ";
	| T_delay3_minmax2 (  mintypmax_expression1 , mintypmax_expression2 ) -> begin
			fprintf fc " # ( ";
			print_mintypmax_expression fc mintypmax_expression1;
			fprintf fc " , ";
			print_mintypmax_expression fc mintypmax_expression2;
			fprintf fc " ) ";
	end
	| T_delay3_minmax3 ( mintypmax_expression1 , mintypmax_expression2 , mintypmax_expression3 ) -> begin
			fprintf fc " # ( ";
			print_mintypmax_expression fc mintypmax_expression1;
			fprintf fc " , ";
			print_mintypmax_expression fc mintypmax_expression2;
			fprintf fc " , ";
			print_mintypmax_expression fc mintypmax_expression3;
			fprintf fc " ) ";
	end
end
and print_delay_value fc delay_value = begin
	match delay_value with
	T_delay_value_UNSIGNED_NUMBER ( _ , _ , i ) -> fprintf fc " %d " i
	| T_delay_value_REAL_NUMBER ( _ , _ , str ) -> fprintf fc " %s " str
	| T_delay_value_id ( identifier ) -> print_identifier fc identifier
end
and print_net_identifier_dimension_list fc net_identifier_dimension_list = begin
	match net_identifier_dimension_list with
	T_net_identifier_dimension_list ( identifier , dimension_list ) -> begin
		print_identifier fc identifier;
		List.iter (print_dimension fc) dimension_list ;
	end
end
and print_dimension fc dimension = begin
	match dimension with
	T_dimension ( expression1 , expression2 ) -> begin
		fprintf fc " [ ";
			print_expression fc expression1;
		fprintf fc " : ";
			print_expression fc expression2;
		fprintf fc " ] "
	end
end
and print_net_decl_assignment fc net_decl_assignment = begin
	match net_decl_assignment with
	T_net_decl_assignment ( identifier , expression ) -> begin
		print_identifier fc identifier;
		fprintf fc " = ";
		print_expression fc expression
	end
end
and print_reg_declaration fc reg_declaration = begin
	match reg_declaration with
	T_reg_declaration ( signed , range , variable_type_list ) -> begin
		fprintf fc " reg " ;
		print_signed_opt fc signed;
		print_range fc range ;
		list_iter_with_sep variable_type_list (print_variable_type fc) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
end
and print_variable_type fc variable_type = begin
	match variable_type with
	T_variable_type_noass ( identifier , dimension_list ) -> begin
		print_identifier fc identifier;
		List.iter (print_dimension fc) dimension_list
	end
	| T_variable_type_ass ( identifier , expression ) -> begin
		print_identifier fc identifier;
		fprintf fc " = " ;
		print_expression fc expression
	end
end
and print_integer_declaration fc integer_declaration = begin
	match integer_declaration with
	T_integer_declaration ( variable_type_list ) -> begin
		fprintf fc " integer ";
		list_iter_with_sep variable_type_list (print_variable_type fc) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
end
and print_real_declaration fc real_declaration = begin
	match real_declaration with
	T_real_declaration ( real_type_list ) -> begin
		fprintf fc " real ";
		list_iter_with_sep real_type_list (print_real_type fc) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
end
and print_real_type fc real_type = begin
	match real_type with
	T_real_type_noass ( identifier , dimension_list ) -> begin
		print_identifier fc identifier;
		List.iter (print_dimension fc) dimension_list;
	end
	| T_real_type_ass ( identifier , expression ) -> begin
		print_identifier fc identifier;
		fprintf fc " = ";
		print_expression fc expression
	end
end
and print_time_declaration fc time_declaration = begin
	match time_declaration with
	T_time_declaration ( variable_type_list ) -> begin
		fprintf fc "  time ";
			list_iter_with_sep variable_type_list (print_variable_type fc) (fun () -> fprintf fc " , " );
		fprintf fc "  ;\n";
	end
end
and print_realtime_declaration fc realtime_declaration = begin
	match realtime_declaration with
	T_realtime_declaration ( real_type_list ) -> begin
		fprintf fc "  realtime ";
			list_iter_with_sep real_type_list (print_real_type fc) (fun () -> fprintf fc " , " );
		fprintf fc "  ;\n";
	end
end
and print_event_declaration fc event_declaration  = begin
	match event_declaration with
	T_event_declaration ( event_identifier_dimension_list_list ) -> begin
		fprintf fc "  event ";
			list_iter_with_sep event_identifier_dimension_list_list (print_event_identifier_dimension_list fc) (fun () -> fprintf fc " , " );
		fprintf fc "  ;\n";
	end
end
and print_event_identifier_dimension_list fc event_identifier_dimension_list = begin
	match event_identifier_dimension_list with
	T_event_identifier_dimension_list ( identifier , dimension_list ) -> begin
		print_identifier fc identifier;
		List.iter ( print_dimension  fc ) dimension_list
	end
end
and print_genvar_declaration fc genvar_declaration = begin
	match genvar_declaration with
	T_genvar_declaration ( identifier_list ) -> begin
		fprintf fc "  genvar ";
			list_iter_with_sep identifier_list (print_identifier fc) (fun () -> fprintf fc " ,\n");
		fprintf fc "  ;\n";
	end
end
and print_task_declaration fc task_declaration = begin
	match task_declaration with
	T_task_declaration1 ( automatic , identifier , task_item_declaration_list , statement ) -> begin
		fprintf fc "  task ";
		print_automatic fc automatic;
		print_identifier fc identifier;
		fprintf fc "  ;\n";
		List.iter (print_task_item_declaration fc ) task_item_declaration_list;
		fprintf fc "  endtask\n";
	end
	| T_task_declaration2 ( automatic , identifier , task_port_item_list , task_item_declaration_list , statement ) -> begin
		fprintf fc "  task ";
		print_automatic fc automatic;
		print_identifier fc identifier;
		fprintf fc "  ( ";
			list_iter_with_sep task_port_item_list (print_task_port_item fc) (fun () -> fprintf fc " ,\n");
		fprintf fc "  ) ";
	end
end
and print_automatic fc automatic = begin
	match automatic with
	T_automatic_false -> fprintf fc ""
	| T_automatic_true	-> fprintf fc " automatic "
end
and print_task_item_declaration fc task_item_declaration = begin
	match task_item_declaration with
	T_task_item_declaration_block ( block_item_declaration ) -> 
		print_block_item_declaration fc block_item_declaration
	| T_task_item_declaration_input ( attribute_instance_list ,  tf_input_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
			print_tf_input_declaration fc tf_input_declaration;
		fprintf fc "  ;\n"
	end
	| T_task_item_declaration_output ( attribute_instance_list ,  tf_output_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		  print_tf_output_declaration fc tf_output_declaration;
		fprintf fc "  ;\n"
	end
	| T_task_item_declaration_inout ( attribute_instance_list ,  tf_inout_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
			print_tf_inout_declaration fc tf_inout_declaration;
		fprintf fc "  ;\n"
	end
end
and print_block_variable_type fc block_variable_type = begin
	match block_variable_type with
	T_block_variable_type ( identifier , dimension_list ) -> begin
		print_identifier fc identifier;
		List.iter (print_dimension fc) dimension_list
	end
end
and print_block_real_type fc block_real_type = begin
	match block_real_type with
	T_block_real_type ( identifier , dimension_list ) -> begin
		print_identifier fc identifier;
		List.iter (print_dimension fc ) dimension_list
	end
end
and print_local_parameter_declaration fc local_parameter_declaration = begin
	match local_parameter_declaration with
	T_local_parameter_declaration_1 ( signed , range , param_assignment_list ) -> begin
		fprintf fc " localparam ";
		print_signed_opt fc signed;
		print_range fc range;
		list_iter_with_sep param_assignment_list ( print_param_assignment fc ) (fun () -> fprintf fc " , ")
	end
	| T_local_parameter_declaration_2 ( parameter_type , param_assignment_list ) -> begin
		fprintf fc " localparam ";
		print_parameter_type fc parameter_type;
		list_iter_with_sep param_assignment_list ( print_param_assignment fc ) (fun () -> fprintf fc " , ")
	end
end
and print_tf_input_declaration fc tf_input_declaration = begin
	match tf_input_declaration with
	T_tf_input_declaration_reg ( reg , signed , range , identifier_list ) -> begin
		fprintf fc "  input ";
		print_reg fc reg;
		print_signed_opt fc signed ;
		print_range fc  range;
		list_iter_with_sep identifier_list ( print_identifier fc ) (fun () -> fprintf fc " , ")
	end
	| T_tf_input_declaration_type ( task_port_type , identifier_list ) -> begin
		fprintf fc "  input ";
		print_task_port_type fc task_port_type;
		list_iter_with_sep identifier_list ( print_identifier fc ) (fun () -> fprintf fc " , ")
	end
end
and print_reg fc reg = begin
	match reg with
	T_reg_false -> fprintf fc ""
	| T_reg_true -> fprintf fc " reg "
end
and print_task_port_type fc task_port_type = begin
	match task_port_type with
	T_task_port_type_integer -> fprintf fc " integer "
	| T_task_port_type_real -> fprintf fc " real "
	| T_task_port_type_realtime -> fprintf fc " realtime "
	| T_task_port_type_time -> fprintf fc " time "
end
and print_task_port_item fc task_port_item = begin
	match task_port_item with
	T_task_port_item_input ( attribute_instance_list , tf_io_declaration_gen ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_tf_io_declaration_gen fc tf_io_declaration_gen
	end
end
and print_tf_io_declaration_gen fc tf_io_declaration_gen = begin
	match tf_io_declaration_gen with
	T_tf_io_declaration_gen1 ( io_type , reg , signed , range , identifier ) -> begin
		print_io_type fc io_type;
		print_reg fc reg;
		print_signed_opt fc signed;
		print_range fc range;
		print_identifier fc identifier;
	end
	| T_tf_io_declaration_gen2 ( io_type , task_port_type , identifier ) -> begin
		print_io_type fc io_type;
		print_task_port_type fc task_port_type;
		print_identifier fc identifier
	end
end
and print_io_type fc io_type = begin
	match io_type with
	T_io_type_NOSPEC -> fprintf fc ""
	| T_io_type_output -> fprintf fc " output "
	| T_io_type_input  -> fprintf fc " input "
	| T_io_type_inout  -> fprintf fc " inout "
end
and  print_tf_output_declaration fc tf_output_declaration = begin
	match tf_output_declaration with
	T_tf_output_declaration_reg ( reg , signed , range , identifier_list ) -> begin
		fprintf fc "  output ";
		print_reg fc reg;
		print_signed_opt fc signed;
		print_range fc range;
		list_iter_with_sep identifier_list ( print_identifier fc ) (fun () -> fprintf fc " , ")
	end
	| T_tf_output_declaration_type ( task_port_type , identifier_list ) -> begin
		fprintf fc "  output ";
		print_task_port_type fc task_port_type;
		list_iter_with_sep identifier_list ( print_identifier fc ) (fun () -> fprintf fc " , ")
	end
end
and print_tf_inout_declaration fc tf_inout_declaration = begin
	match tf_inout_declaration with
	T_tf_inout_declaration_reg ( reg , signed , range , identifier_list ) -> begin
		fprintf fc "  inout ";
		print_reg fc reg;
		print_signed_opt fc signed;
		print_range fc range;
		list_iter_with_sep identifier_list ( print_identifier fc ) (fun () -> fprintf fc " , ")
	end
	| T_tf_inout_declaration_type ( task_port_type , identifier_list ) -> begin
		fprintf fc "  inout ";
		print_task_port_type fc task_port_type;
		list_iter_with_sep identifier_list ( print_identifier fc ) (fun () -> fprintf fc " , ")
	end
end
and print_function_declaration fc function_declaration = begin
	match function_declaration with
	T_function_declaration_1 ( automatic , function_range_or_type , identifier , function_item_declaration_list , statement ) -> begin
		fprintf fc "\n";
		fprintf fc "  function ";
		print_automatic fc automatic;
		print_function_range_or_type fc function_range_or_type;
		print_identifier fc identifier;
		fprintf fc "  ;\n";
		List.iter (print_function_item_declaration fc) function_item_declaration_list ;
		print_statement fc statement;
		fprintf fc "  endfunction\n"
	end
	| T_function_declaration_2 ( automatic , function_range_or_type , identifier , attribute_instance_list_tf_input_declaration_list , function_item_declaration_list , statement ) -> begin
		fprintf fc "\n";
		fprintf fc "  function ";
		print_automatic fc automatic;
		print_function_range_or_type fc function_range_or_type;
		print_identifier fc identifier;
		fprintf fc " ( ";
			list_iter_with_sep attribute_instance_list_tf_input_declaration_list (print_function_port fc) (fun () -> fprintf fc " , ");
		fprintf fc " ) ";

		fprintf fc "  endfunction\n"
	end
end
and print_function_range_or_type fc function_range_or_type = begin
	match function_range_or_type with
	T_function_range_or_type_NOSPEC  -> fprintf fc " "
	| T_function_range_or_type ( signed , range ) -> begin
		print_signed_opt fc signed;
		print_range fc range
	end
	| T_function_range_or_type_INTEGER  -> fprintf fc " integer "
	| T_function_range_or_type_REAL  -> fprintf fc " real "
	| T_function_range_or_type_REALTIME  -> fprintf fc " realtime "
	| T_function_range_or_type_TIME  -> fprintf fc " time "
end
and print_function_item_declaration fc function_item_declaration = begin
	match function_item_declaration with
	T_function_item_declaration_block ( block_item_declaration ) -> 
		print_block_item_declaration fc block_item_declaration
	| T_function_item_declaration_input ( attribute_instance_list , tf_input_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_tf_input_declaration fc tf_input_declaration;
		fprintf fc " ;\n"
	end
end
and print_statement fc statement = begin
	match statement with
	T_statement_NOSPEC (attribute_instance_list)->  begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc "  ;\n"
	end
	| T_statement_blocking_assignment ( attribute_instance_list , blocking_assignment ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_blocking_assignment fc blocking_assignment;
		fprintf fc "  ;\n"
	end
	| T_statement_case_statement (attribute_instance_list , case_statement ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_case_statement fc case_statement
	end
	| T_statement_conditional_statement  ( attribute_instance_list , conditional_statement ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_conditional_statement fc conditional_statement
	end
	| T_statement_disable_statement ( attribute_instance_list , disable_statement ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_disable_statement fc disable_statement
	end
	| T_statement_event_trigger ( attribute_instance_list , event_trigger ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_event_trigger fc event_trigger
	end
	| T_statement_loop_statement ( attribute_instance_list , loop_statement ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_loop_statement fc loop_statement
	end
	| T_statement_nonblocking_assignment ( attribute_instance_list , nonblocking_assignment ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_nonblocking_assignment fc nonblocking_assignment;
		fprintf fc "  ;\n"
	end
	| T_statement_par_block ( attribute_instance_list , par_block ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_par_block fc par_block
	end
	| T_statement_procedural_continuous_assignments   ( attribute_instance_list , procedural_continuous_assignments ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_procedural_continuous_assignments fc procedural_continuous_assignments;
		fprintf fc "  ;\n"
	end
	| T_statement_procedural_timing_control_statement  ( attribute_instance_list , procedural_timing_control_statement ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_procedural_timing_control_statement fc procedural_timing_control_statement
	end
	| T_statement_seq_block ( attribute_instance_list , seq_block ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_seq_block fc seq_block
	end
	| T_statement_system_task_enable ( attribute_instance_list , system_task_enable ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_system_task_enable fc system_task_enable
	end
	| T_statement_task_enable ( attribute_instance_list , task_enable ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_task_enable fc task_enable
	end
	| T_statement_wait_statement  ( attribute_instance_list , wait_statement ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_wait_statement fc wait_statement
	end
end
and print_blocking_assignment fc blocking_assignment = begin
	match blocking_assignment with
	T_blocking_assignment ( net_lvalue , delay_or_event_control , expression ) -> begin
		print_net_lvalue fc net_lvalue;
		fprintf fc " = ";
		print_delay_or_event_control fc delay_or_event_control;
		print_expression fc expression
	end
end
and print_net_lvalue fc net_lvalue = begin
	match net_lvalue with
	T_net_lvalue_id ( hierarchical_identifier ) -> 
		print_hierarchical_identifier fc hierarchical_identifier
	| T_net_lvalue_idexp ( hierarchical_identifier , expression_list , range_expression ) -> begin
		assert false
	end
	| T_net_lvalue_lvlist (net_lvalue_list) -> begin
		fprintf fc " { ";
			list_iter_with_sep net_lvalue_list ( print_net_lvalue fc ) (fun () -> fprintf fc " , ");
		fprintf fc " } ";
	end
end
and print_case_statement fc case_statement = begin
	match case_statement with
	T_case_statement_case ( expression , case_item_list ) -> begin
		fprintf fc " case ( ";
		  print_expression fc expression;
		fprintf fc " )\n";
			List.iter (print_case_item fc) case_item_list;
		fprintf fc " endcase\n";
	end
	| T_case_statement_casez ( expression , case_item_list ) -> begin
		fprintf fc " casez ( ";
		  print_expression fc expression;
		fprintf fc " )\n";
			List.iter (print_case_item fc) case_item_list;
		fprintf fc " endcase\n";
	end
	| T_case_statement_casex ( expression , case_item_list ) -> begin
		fprintf fc " casex ( ";
		  print_expression fc expression;
		fprintf fc " )\n";
			List.iter (print_case_item fc) case_item_list;
		fprintf fc " endcase\n";
	end
end
and print_case_item fc case_item = begin
	match case_item with
	T_case_item (expression_list , statement ) -> begin
		list_iter_with_sep expression_list ( print_expression fc ) (fun () -> fprintf fc " , ");
		fprintf fc " : ";
		print_statement fc statement
	end
	| T_case_item_default ( colon_opt ,  statement ) -> begin
		fprintf fc " default  ";
		print_colon_opt fc colon_opt;
		print_statement fc statement
	end
end
and print_colon_opt fc colon_opt = begin
	match colon_opt with
	T_colon_opt_false -> fprintf fc ""
	| T_colon_opt_true -> fprintf fc " : "
end
and print_conditional_statement fc conditional_statement = begin
	match conditional_statement with
	T_conditional_statement_ifelse ( expression , statement1 , statement2 ) -> begin
		fprintf fc " if (";
		  print_expression fc expression;
		fprintf fc " )";
		  print_statement fc statement1;
			match statement2 with
			T_statement_NOSPEC (attribute_instance_list )->  begin
				List.iter (print_attribute_instance fc) attribute_instance_list;
			end
			| _ -> begin
				fprintf fc " else ";
				print_statement fc statement2
			end
	end
	| _ -> assert false
end
and print_disable_statement fc disable_statement = begin
	match disable_statement with
	T_disable_statement ( hierarchical_identifier ) -> begin
		fprintf fc " disable ";
			print_hierarchical_identifier fc hierarchical_identifier ;
		fprintf fc " ;\n";
	end
end
and print_event_trigger fc event_trigger = begin
	match event_trigger with
	T_event_trigger ( hierarchical_identifier ) -> begin
		fprintf fc " -> ";
			print_hierarchical_identifier fc hierarchical_identifier;
		fprintf fc " ;\n";
	end
end
and print_loop_statement fc loop_statement = begin
	match loop_statement with
	T_loop_statement_forever ( statement ) -> begin
		fprintf fc " forever ";
		print_statement fc statement
	end
	| T_loop_statement_repeat ( expression , statement ) -> begin
		fprintf fc " repeat ( ";
			print_expression fc expression;
		fprintf fc " ) ";
			print_statement fc statement
	end
	| T_loop_statement_while ( expression , statement ) -> begin
		fprintf fc " while ( ";
			print_expression fc expression;
		fprintf fc " ) ";
			print_statement fc statement
	end
	| T_loop_statement_for ( net_assignment1 , expression , net_assignment2 , statement ) -> begin
		fprintf fc " for ( ";
		print_net_assignment fc net_assignment1;
		fprintf fc " ; ";
		print_expression fc expression;
		fprintf fc " ; ";
		print_net_assignment fc net_assignment2;
		fprintf fc " ) ";
		print_statement fc statement
	end
end
and print_nonblocking_assignment fc nonblocking_assignment = begin
	match nonblocking_assignment with
	T_nonblocking_assignment ( net_lvalue , delay_or_event_control , expression ) -> begin
		print_net_lvalue fc net_lvalue;
		fprintf fc " <= ";
		print_delay_or_event_control fc delay_or_event_control;
		print_expression fc expression
	end
end
and print_delay_or_event_control fc delay_or_event_control = begin
	match delay_or_event_control with
	T_delay_or_event_control_NOSPEC -> fprintf fc ""
	| T_delay_or_event_control_delay_control ( delay_control ) -> 
		print_delay_control fc delay_control
	| T_delay_or_event_control_event_control ( event_control ) -> 
		print_event_control fc event_control
	| T_delay_or_event_control_3 ( expression , event_control ) -> begin
		fprintf fc " repeat ( ";
			print_expression fc expression;
		fprintf fc " ) ";
			print_event_control fc event_control
	end
end
and print_delay_control fc delay_control = begin
	match delay_control with
	T_delay_control_delay_value ( delay_value ) -> begin
		fprintf fc " # ";
		print_delay_value fc delay_value
	end
	| T_delay_control_mintypmax_expression ( mintypmax_expression ) -> begin
		fprintf fc " # ( ";
			print_mintypmax_expression fc mintypmax_expression;
		fprintf fc " ) ";
	end
end
and print_event_control fc event_control = begin
	match event_control with
	T_event_control_eventid ( hierarchical_identifier ) -> begin
		fprintf fc " @ ";
		print_hierarchical_identifier fc hierarchical_identifier
	end
	| T_event_control_event_exp ( event_expression_list ) -> begin
		fprintf fc " @ ( ";
			list_iter_with_sep event_expression_list ( print_event_expression fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ) ";
	end
	| T_event_control_start -> 
		fprintf fc " @(*) "
end
and print_event_expression fc event_expression = begin
	match event_expression with
	T_event_expression_exp ( expression ) -> 
		print_expression fc expression
	| T_event_expression_pos ( expression ) -> begin
		fprintf fc " posedge ";
		print_expression fc expression
	end
	| T_event_expression_neg ( expression ) -> begin
		fprintf fc " negedge ";
		print_expression fc expression
	end
	| T_event_expression_or ( event_expression1 , event_expression2 ) -> 
		assert false
end
and print_par_block fc par_block = begin
	match par_block with
	T_par_block (  colon_block_identifier , statement_or_block_item_list ) -> begin
		fprintf fc " fork ";
			print_colon_block_identifier fc colon_block_identifier ;
			fprintf fc "\n";
			List.iter (print_statement_or_block_item fc) statement_or_block_item_list;
		fprintf fc " join "
	end
end
and print_statement_or_block_item fc statement_or_block_item = begin
	match statement_or_block_item with
	T_statement_or_block_item_statement ( statement ) -> 
		print_statement fc statement
	| T_statement_or_block_item_block ( block_item_declaration ) -> 
		print_block_item_declaration fc block_item_declaration
end
and print_block_item_declaration fc block_item_declaration = begin
	match block_item_declaration with
	T_block_item_declaration_reg ( attribute_instance_list , signed , range , block_variable_type_list ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc " reg ";
		print_signed_opt fc signed;
		print_range fc range;
		list_iter_with_sep block_variable_type_list ( print_block_variable_type fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
	| T_block_item_declaration_integer ( attribute_instance_list , block_variable_type_list ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc " integer ";
		list_iter_with_sep block_variable_type_list ( print_block_variable_type fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
	| T_block_item_declaration_time ( attribute_instance_list , block_variable_type_list ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc " time ";
		list_iter_with_sep block_variable_type_list ( print_block_variable_type fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
	| T_block_item_declaration_real ( attribute_instance_list , block_real_type_list ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc " real ";
		list_iter_with_sep block_real_type_list ( print_block_real_type fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
	| T_block_item_declaration_realtime ( attribute_instance_list , block_real_type_list ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc " realtime ";
		list_iter_with_sep block_real_type_list ( print_block_real_type fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
	| T_block_item_declaration_event ( attribute_instance_list , event_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_event_declaration fc event_declaration
	end
	| T_block_item_declaration_local_param ( attribute_instance_list , local_parameter_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_local_parameter_declaration fc local_parameter_declaration;
		fprintf fc " ;\n"
	end
	| T_block_item_declaration_param ( attribute_instance_list , parameter_declaration ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_parameter_declaration fc parameter_declaration;
		fprintf fc " ;\n"
	end
end
and print_procedural_continuous_assignments fc procedural_continuous_assignments = begin
	match procedural_continuous_assignments with
	T_procedural_continuous_assignments_assign ( net_assignment ) -> begin
		fprintf fc " assign ";
		print_net_assignment fc net_assignment
	end
	| T_procedural_continuous_assignments_deassign ( net_lvalue ) -> begin
		fprintf fc " deassign ";
		print_net_lvalue fc net_lvalue;
	end
	| T_procedural_continuous_assignments_force1 ( net_assignment ) -> begin
		fprintf fc " force ";
		print_net_assignment fc net_assignment
	end
	| T_procedural_continuous_assignments_release1 ( net_lvalue )  -> begin
		fprintf fc " release ";
		print_net_lvalue fc net_lvalue
	end
	| _ -> assert false
end
and print_procedural_timing_control_statement fc procedural_timing_control_statement = begin
	match procedural_timing_control_statement with
	T_procedural_timing_control_statement ( procedural_timing_control , statement ) -> begin
		print_procedural_timing_control fc procedural_timing_control;
		print_statement fc statement
	end
end
and print_procedural_timing_control fc procedural_timing_control = begin
	match procedural_timing_control with
	T_procedural_timing_control_delay ( delay_control ) -> 
		print_delay_control fc delay_control
	| T_procedural_timing_control_event ( event_control ) -> 
		print_event_control fc event_control
end
and print_seq_block fc seq_block = begin
	match seq_block with
	T_seq_block ( colon_block_identifier , statement_or_block_item_list ) -> begin
		fprintf fc " begin ";
			print_colon_block_identifier fc colon_block_identifier ;
		fprintf fc "\n";
			List.iter (print_statement_or_block_item fc) statement_or_block_item_list;
		fprintf fc " end\n";
	end
end
and print_system_task_enable fc system_task_enable = begin
	match system_task_enable with
	T_system_task_enable (  system_function_identifier, expression_list ) -> begin
		print_system_function_identifier fc system_function_identifier;
		begin
			match expression_list with
			[] -> fprintf fc ""
			| _ -> begin
				fprintf fc " ( ";
					list_iter_with_sep expression_list ( print_expression fc ) (fun () -> fprintf fc " , ");
				fprintf fc " ) ";
			end
		end;
		fprintf fc " ;\n";
	end
end
and print_task_enable fc task_enable = begin
	match task_enable with
	T_task_enable ( hierarchical_identifier , expression_list ) -> begin
		print_hierarchical_identifier fc hierarchical_identifier;
		begin
			match expression_list with
			[] -> fprintf fc ""
			| _ -> begin
				fprintf fc " ( ";
					list_iter_with_sep expression_list ( print_expression fc ) (fun () -> fprintf fc " , ");
				fprintf fc " ) ";
			end
		end;
		fprintf fc " ;\n";
	end
end
and print_wait_statement fc wait_statement = begin
	match wait_statement with
	T_wait_statement ( expression , statement ) -> begin
		fprintf fc " wait ( ";
			print_expression fc expression;
		fprintf fc " ) ";
			print_statement fc statement
	end
end
and print_function_port fc function_port = begin
	match function_port with
	T_attribute_instance_list_tf_input_declaration ( attribute_instance_list , tf_io_declaration_gen ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_tf_io_declaration_gen fc tf_io_declaration_gen
	end
end
and print_net_assignment fc net_assignment = begin
	match net_assignment with
	T_net_assignment ( net_lvalue , expression ) -> begin
		print_net_lvalue fc net_lvalue;
		fprintf fc " = ";
		print_expression fc expression
	end
end
and print_colon_block_identifier fc colon_block_identifier = begin
	match colon_block_identifier with
	T_colon_block_identifier_NOSPEC -> fprintf fc ""
	| T_colon_block_identifier ( identifier ) -> begin
		fprintf fc " : ";
		print_identifier fc identifier
	end
end
and print_parameter_override fc defparam_assignment_list = begin
	fprintf fc " defparam ";
		list_iter_with_sep defparam_assignment_list ( print_defparam_assignment fc ) (fun () -> fprintf fc " , ");
	fprintf fc " ;\n";
end
and print_defparam_assignment fc defparam_assignment = begin
	match defparam_assignment with
	T_defparam_assignment ( hierarchical_identifier , mintypmax_expression ) -> begin
		print_hierarchical_identifier fc hierarchical_identifier;
		fprintf fc " = ";
		print_mintypmax_expression fc mintypmax_expression
	end
end
and print_continuous_assign fc continuous_assign = begin
	match continuous_assign with
	T_continuous_assign ( drive_strength , delay3 , net_assignment_list ) -> begin
		fprintf fc " assign ";
		print_drive_strength fc drive_strength;
		print_delay3 fc delay3;
		list_iter_with_sep net_assignment_list ( print_net_assignment fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n";
	end
end
and print_module_instantiation fc module_instantiation = begin
	match module_instantiation with
	T_module_instantiation ( identifier , parameter_value_assignment , module_instance_list ) -> begin
		print_identifier fc identifier;
		print_parameter_value_assignment fc parameter_value_assignment;
		list_iter_with_sep module_instance_list ( print_module_instance fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ;\n"
	end
end
and print_parameter_value_assignment fc parameter_value_assignment = begin
	match parameter_value_assignment with
	T_parameter_value_assignment_NOSPEC -> fprintf fc " "
	| T_parameter_value_assignment_order ( expression_list ) -> begin
		fprintf fc " # ( ";
		list_iter_with_sep expression_list ( print_expression fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ) "
	end
	| T_parameter_value_assignment_named ( named_parameter_assignment_list ) -> begin
		fprintf fc " # ( ";
		list_iter_with_sep named_parameter_assignment_list ( print_named_parameter_assignment fc ) (fun () -> fprintf fc " , ");
		fprintf fc " ) ";
	end
end
and print_named_parameter_assignment fc named_parameter_assignment = begin
	match named_parameter_assignment with
	T_named_parameter_assignment ( identifier , mintypmax_expression ) -> begin
		fprintf fc " .";
		print_identifier fc identifier;
		fprintf fc " ( ";
			print_mintypmax_expression fc mintypmax_expression;
		fprintf fc " ) ";
	end
end
and print_module_instance fc module_instance = begin
	match module_instance with
	T_module_instance ( name_of_module_instance , list_of_port_connections ) -> begin
		print_name_of_module_instance fc name_of_module_instance;
		fprintf fc " ( ";
		print_list_of_port_connections fc list_of_port_connections;
		fprintf fc " ) ";
	end
end
and print_name_of_module_instance fc name_of_module_instance = begin
	match name_of_module_instance with
	T_name_of_module_instance ( identifier , range ) -> begin
		print_identifier fc identifier;
		print_range fc range
	end
end
and print_list_of_port_connections fc list_of_port_connections = begin
	match list_of_port_connections with
	T_list_of_port_connections_ordered ( ordered_port_connection_list ) -> begin
		list_iter_with_sep ordered_port_connection_list ( print_ordered_port_connection fc ) (fun () -> fprintf fc " , ");
	end
	| T_list_of_port_connections_named ( named_port_connection_list ) -> begin
		list_iter_with_sep named_port_connection_list ( print_named_port_connection fc ) (fun () -> fprintf fc " , ");
	end
end
and print_ordered_port_connection fc ordered_port_connection = begin
	match ordered_port_connection with
	T_ordered_port_connection ( attribute_instance_list , expression ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		print_expression fc expression
	end
end
and print_named_port_connection fc named_port_connection = begin
	match named_port_connection with
	T_named_port_connection ( attribute_instance_list , identifier , expression ) -> begin
		List.iter (print_attribute_instance fc) attribute_instance_list;
		fprintf fc " .";
		print_identifier fc identifier;
		fprintf fc " ( ";
			print_expression fc expression;
		fprintf fc " ) "
	end
end
and print_initial_construct fc initial_construct = begin
	match initial_construct with
	T_initial_construct ( statement ) -> begin
		fprintf fc " initial  ";
		print_statement fc statement
	end
end
and print_always_construct fc always_construct = begin
	match always_construct with
	T_always_construct ( statement ) -> begin
		fprintf fc "\n";
		fprintf fc "always  ";
		print_statement fc statement;
		fprintf fc "\n"
	end
end
and print_loop_generate_construct fc loop_generate_construct = begin
	match loop_generate_construct with
	T_loop_generate_construct ( genvar_initialization , expression , genvar_iteration , generate_block ) -> begin
		fprintf fc " for ( ";
		print_genvar_initialization fc genvar_initialization;
		fprintf fc " ; ";
		print_expression fc expression;
		fprintf fc " ; ";
		print_genvar_iteration fc genvar_iteration;
		fprintf fc " ) ";
		print_generate_block fc generate_block
	end
end
and print_genvar_initialization fc genvar_initialization = begin
	match genvar_initialization with
	T_genvar_initialization ( identifier , expression ) -> begin
		print_identifier fc identifier;
		fprintf fc " = ";
		print_expression fc expression
	end
end
and print_genvar_iteration fc genvar_iteration = begin
	match genvar_iteration with
	T_genvar_iteration ( identifier , expression ) -> begin
		print_identifier fc identifier;
		fprintf fc " = ";
		print_expression fc expression
	end
end
and print_generate_block fc generate_block = begin
	match generate_block with
	T_generate_block_NOSPEC  -> fprintf fc ""
	| T_generate_block_mgi ( module_item  ) -> begin
		print_module_item fc module_item
	end
	| T_generate_block_begin ( identifier , module_item_list ) -> begin
		fprintf fc " begin ";
		begin
			match identifier with
			T_identifier_NOSPEC -> fprintf fc ""
			| _ -> begin
				fprintf fc " : ";
				print_identifier fc identifier
			end
		end;
		fprintf fc " \n";
		List.iter (print_module_item fc) module_item_list;
		fprintf fc " end\n";
	end
end
and print_conditional_generate_construct fc conditional_generate_construct = begin
	match conditional_generate_construct with
	T_conditional_generate_construct_if ( if_generate_construct ) -> begin
		print_if_generate_construct fc if_generate_construct
	end
	| T_conditional_generate_construct_case ( case_generate_construct ) -> begin
		print_case_generate_construct fc case_generate_construct
	end
end
and print_if_generate_construct fc if_generate_construct = begin
	match if_generate_construct with
	T_if_generate_construct ( expression , generate_block1 , generate_block2 ) -> begin
		fprintf fc " if( ";
			print_expression fc expression;
		fprintf fc " ) ";
			print_generate_block fc generate_block1;
			match generate_block2 with
			T_generate_block_NOSPEC -> fprintf fc " "
			| _ -> begin
				fprintf fc " else ";
				print_generate_block fc generate_block2;
			end
	end
end
and print_case_generate_construct fc case_generate_construct = begin
	match case_generate_construct with
	T_case_generate_construct ( expression , case_generate_item_list ) -> begin
		fprintf fc " case ( ";
			print_expression fc expression;
		fprintf fc " )\n";
			List.iter (print_case_generate_item fc ) case_generate_item_list;
		fprintf fc " endcase\n";
	end
end
and print_case_generate_item fc case_generate_item = begin
	match case_generate_item with
	T_case_generate_item_case ( expression_list , generate_block ) -> begin
		list_iter_with_sep expression_list ( print_expression fc ) (fun () -> fprintf fc " , ");
		fprintf fc " : ";
		print_generate_block fc generate_block
	end
	| T_case_generate_item_default ( generate_block ) -> begin
		fprintf fc " default  ";
		begin
			match generate_block with
			T_generate_block_NOSPEC -> fprintf fc " "
			| _ -> begin
				fprintf fc " :  ";
				print_generate_block fc generate_block
			end
		end
		;
	end
end
