	method double_loop_r (p:int) (l:int) (r:int) = begin
		let dff_idxpairlst=List.filter (self#isdff_name_index) name_index_lst
		in
		let dff_curlst=List.map (fun x -> match x with (_,(y,_)) -> y) dff_idxpairlst
		in begin
			let lilst=self#lr2list (p+l+1) (p+l+1+r-2)
			in
			let proc_liequ li = begin
				let ov_li  = List.map (fun x -> x+ li*final_index_oneinst) dff_curlst
				and rilst=self#lr2list (li+1) (p+l+1+r-1)
				in
				let proc_riequ ri = begin
					let ov_ri  = List.map (fun x -> x+ ri*final_index_oneinst) dff_curlst
					in
					let ov_pair_lst=List.combine ov_li ov_ri
					in
					let (res_lst,cls_lstlst) = List.split (List.map (self#alloc_and_equ_res) ov_pair_lst)
					in
					let ov_pair_lst_shift=List.map (fun x -> match x with (v1,v2) -> (v1+(p+l+1+r)*final_index_oneinst,v2+(p+l+1+r)*final_index_oneinst)) ov_pair_lst
					in
					let (res_lst_shift,cls_lstlst_shift) = List.split (List.map (self#alloc_and_equ_res) ov_pair_lst_shift)
					and rii = self#alloc_index 1
					in begin
						clause_list_multiple <- (List.concat cls_lstlst) @ (List.concat cls_lstlst_shift) @ (self#encode_Red_AND rii (res_lst @ res_lst_shift)) @ clause_list_multiple ;
						rii
					end
				end
				in
				List.map (proc_riequ) rilst
			end
			in 
			let li_equ_var_lst=List.concat (List.map (proc_liequ) lilst)
			and riii=self#alloc_index 1
			in begin
				clause_list_multiple <- (self#encode_Red_OR riii li_equ_var_lst) @ clause_list_multiple ;
				riii
			end
		end
	end
