	method gen_relation_pld  (p1:int) (l1:int) (d1:int) infered_assertion_array_lst_old =begin
		self#set_unlock_multiple ;

		let bd=p1+1+d1
		and d=d1
		and p=p1
		and f=l1
		and l=1
		in
		let nl_const_cnfname=   String.concat "" [tempdirname ; "dumpout/nl_const_"    ; name ;"_d";string_of_int(d);"_l";string_of_int(l);"_p";string_of_int(p);"_f";string_of_int(f);".cnf"]
		in begin
			(*to dump out an instance from 0 to bd-1*)
			(*nl_const cnf construction*)
			let (clause_list_multiple_aux,last_index_aux) = (self#gen_multiple_instance_step2 bd)
			in begin
				self#set_clause_list_multiple clause_list_multiple_aux;
				self#set_last_index last_index_aux;
				()
			end
			;
			self#append_clause_list_multiple (self#connect_multiple_instance_step3 0 (bd-1));

			let assertion_shengyushen="assertion_shengyushen"
			in
			let constrain_assertion li = begin (*li is from bound-1 to 0*)
				let ov=List.concat (List.map self#name2idxlist [assertion_shengyushen])
				in 
				let ov_0 = List.map (fun x -> x+ li*final_index_oneinst) ov
				in
				List.map (fun x -> ([x],"assertion_shengyushen") ) ov_0
			end
			in
			let rec try_assertion li = begin
				if(li<0) then []
				else begin
					let old_assclslst=constrain_assertion li
					and cur_assclslst=try_assertion (li-1)
					in
					old_assclslst@cur_assclslst
				end
			end
			in begin
				if List.length (List.filter (fun x -> match x with (nm,_) -> string_equ nm assertion_shengyushen ) name_index_lst) > 0 then
					self#append_clause_list_multiple (try_assertion (bd-1))
				else 
					print_endline "warning : not found assertion_shengyushen"
			end
			;
			
			(*force the npi to be the same*)
			let npi_lst=bv_non_proctocol_input_list
			and npi_cycle_lst = lr2list 1 (bd-1)
			in
			let proc_npi_cycle i = begin
				let npi_lst_i = List.map (fun x -> x+(i*final_index_oneinst)) npi_lst
				in
				self#append_clause_list_multiple (self#encode_EQUV (npi_lst) (npi_lst_i))
			end
			in
			List.iter proc_npi_cycle npi_cycle_lst
			;
		
		check_clslst_maxidx clause_list_multiple last_index;
			(*force the infered_assertion_array_lst_old to be invalid*)
			List.iter (fun x -> self#force_assertion (invert_assertion x)) infered_assertion_array_lst_old ;
			
			self#set_lock_multiple ;
		end
	end
