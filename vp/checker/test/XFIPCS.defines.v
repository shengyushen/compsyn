//SCCS File Version= %I%
//Release Date= 14/04/20  19:56:32 GMT startFileName /vobs/vob012/xfipcs/verilog/rtl/XFIPCS.defines.v endFileName

// --------------------------------------------------------------------
// IBM Confidential
// --------------------------------------------------------------------
// (C) Copyright IBM Corporation 2014
//
// Use of this design is restricted by terms and conditions specified
// in the Design Kit License Agreement and the IBM customer
// contract. Unauthorized use of this design is prohibited. Customer
// is responsible to ensure this design is functional in the target
// application including all configurations generated by changing this
// defines file.
//
// Contact your IBM Field Application Engineer (FAE) for any updates
// for this core.
// --------------------------------------------------------------------

//SCCS File Version= %I%
//Release Date= %E% %U%

// --------------------------------------------------------------------
// IBM Confidential
// --------------------------------------------------------------------
// (C) Copyright IBM Corporation 2014
//
// Use of this design is restricted by terms and conditions specified
// in the Design Kit License Agreement and the IBM customer
// contract. Unauthorized use of this design is prohibited. Customer
// is responsible to ensure this design is functional in the target
// application including all configurations generated by changing this
// defines file.
//
// Contact your IBM Field Application Engineer (FAE) for any updates
// for this core.
// --------------------------------------------------------------------

//-----------------------------------------------------------------------------
// File   : XFIPCS.defines.v
//
// Description: This file contains verilog `define statements which configure
//              various aspects of the XFIPCS core.
//
//----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Start of definitions
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// 0. Technology specific
// Uncomment SYNCH_IBM_CU32HP to get specific IBM_CU32HP cells for XFIPCS_ASYNC_DRS and XFIPCS_ASYNC_BUS_DRS modules
`define SYNCH_IBM_CU32HP

//-----------------------------------------------------------------------------
// 1. Module Names
// The following configuration items control the module names of modules
// which contain other configuration settings.  This enables the user to
// generate multiple configurations of the core and instantiate them in
// one design without configuration and module name collisions.
//
// The definitions below describe the module (and file) names of the logic
// as provided.

`define XFIPCS_TOPLEVELNAME                     XFIPCS
`define XFIPCS_TOPLEVELNAME_ASYNC_DRS           XFIPCS_ASYNC_DRS
`define XFIPCS_TOPLEVELNAME_ASYNC_BUS_DRS       XFIPCS_ASYNC_BUS_DRS
`define XFIPCS_TOPLEVELNAME_BER_FSM             XFIPCS_BER_FSM
`define XFIPCS_TOPLEVELNAME_BER_MONITOR         XFIPCS_BER_MONITOR
`define XFIPCS_TOPLEVELNAME_64B66B_DEC          XFIPCS_64B66B_DEC
`define XFIPCS_TOPLEVELNAME_64B66B_ENC          XFIPCS_64B66B_ENC
`define XFIPCS_TOPLEVELNAME_LOCK_FSM            XFIPCS_LOCK_FSM
`define XFIPCS_TOPLEVELNAME_MDIO                XFIPCS_MDIO
`define XFIPCS_TOPLEVELNAME_RESET               XFIPCS_RESET
`define XFIPCS_TOPLEVELNAME_RX_BLOCK_SYNC       XFIPCS_RX_BLOCK_SYNC
`define XFIPCS_TOPLEVELNAME_RX_FIFO             XFIPCS_RX_FIFO
`define XFIPCS_TOPLEVELNAME_RX_FLOW             XFIPCS_RX_FLOW
`define XFIPCS_TOPLEVELNAME_RX_FSM              XFIPCS_RX_FSM
`define XFIPCS_TOPLEVELNAME_RX_LPI_FSM          XFIPCS_RX_LPI_FSM
`define XFIPCS_TOPLEVELNAME_RX_PCS              XFIPCS_RX_PCS
`define XFIPCS_TOPLEVELNAME_RX_SDR_TO_DDR       XFIPCS_RX_SDR_TO_DDR
`define XFIPCS_TOPLEVELNAME_RX_TPC              XFIPCS_RX_TPC
`define XFIPCS_TOPLEVELNAME_TX_DDR_TO_SDR       XFIPCS_TX_DDR_TO_SDR
`define XFIPCS_TOPLEVELNAME_TX_FIFO             XFIPCS_TX_FIFO
`define XFIPCS_TOPLEVELNAME_TX_FLOW             XFIPCS_TX_FLOW
`define XFIPCS_TOPLEVELNAME_TX_FSM              XFIPCS_TX_FSM
`define XFIPCS_TOPLEVELNAME_TX_GEARBOX          XFIPCS_TX_GEARBOX
`define XFIPCS_TOPLEVELNAME_TX_PCS              XFIPCS_TX_PCS
`define XFIPCS_TOPLEVELNAME_TX_LPI_FSM          XFIPCS_TX_LPI_FSM
`define XFIPCS_TOPLEVELNAME_TX_TPG              XFIPCS_TX_TPG

//-----------------------------------------------------------------------------
// 2. SDR vs DDR operation.
// The next define makes the XGMII data buses TXD and RXD 32 bits wide, and
// makes the XGMII control buses TXC and RXC 4 bits wide, and makes all four synchronous to both edges of
// XGMII_CLK. This is the IEEE specification as defined in IEEE 802.3ae-2002 Clause 46.
// If left undefined the core is assumed to be running in SDR mode.
//`define XFIPCS_TOPLEVELNAME_DDR

//-----------------------------------------------------------------------------
// 3. WIS Mode.
// If enabled, makes the core a WAN XFI PCS, conforming to the right-hand side
// of the Ethernet Stack Diagram in IEEE 802.3ae-2002 Figure 49-1 and connecting
// at the PMA interface to a WIS device of the customers choosing. This conforms
// to the WIS descriptions in IEEE 802.3ae-2002 Clause 49.
// If left undefined the core will be configured as a LAN XFI PCS.
//`define XFIPCS_TOPLEVELNAME_WIS_ENABLED

//-----------------------------------------------------------------------------
// 4. Alternate encode mode.
`define XFIPCS_TOPLEVELNAME_ALTERNATE_ENCODE_INPUT

//-----------------------------------------------------------------------------
// 5. 16G32G Fibre Channel.
// If defined, get 16G32G Fibre Channel PCS; if not defined, get 10G XFI PCS.
`define XFIPCS_16G32GFC

//-----------------------------------------------------------------------------
// 6. Remove FIFO control(clock compensation) logic
// If defined, FIFO control(clock compensation) logic is included and FIFO should be
// connected outside; if not defined, FIFO control(clock compensation) logic is NOT
// included and FIFO outside can be bypassed.
//`define XFIPCS_FIFOCNTL

//-----------------------------------------------------------------------------
// 7. Timer specifications as defined in the 802.3-az addendum
// NOTE: These values are specified in the IEEE 802.3-az specification
// and should not be altered beyond what is specified.
// Doing so can produce undesirable results.

// 10G: The following timer max values are given as clock cycles and
// assume a 156.25Mhz XGMII_CLK. The relative times are defined
// in table 49-3 of the IEEE 802.3az spec.
// <IEEE specified time> * clock_rate = value
// 16G: The following timer values are given as clock cycles and
// assume a 212.5MHz(or 425MHz) XGMII_CLK. The relative times are defined
// in table 24 of the FC-FS-4 spec.
// <T11 specified time> * clock_rate = value
// 32G: The following timer values are given as clock cycles and
// assume a 425MHz XGMII_CLK. The relative times are defined
// in table 24 of the FC-FS-4 spec.
// <T11 specified time> * clock_rate = value
`ifdef XFIPCS_16G32GFC
  `define XFIPCS_RX_TQ_TIMER_MAX_16G_425M    21'h137478  // Tq   = 3ms
  `define XFIPCS_RX_TQ_TIMER_MAX_16G_212M    21'h9BA3C   // Tq   = 3ms
  `define XFIPCS_RX_WF_TIMER_MIN_16G_425M    23'h40D990  // Twtf = 10ms
  `define XFIPCS_RX_WF_TIMER_MIN_16G_212M    23'h206CC8  // Twtf = 10ms
  `define XFIPCS_RX_TW_TIMER_MIN_16G_425M    13'h10C5    // Tw   = 10.1us
  `define XFIPCS_RX_TW_TIMER_MIN_16G_212M    13'h863     // Tw   = 10.1us
  `define XFIPCS_RX_TQ_TIMER_MAX_32G         21'h137478  // Tq   = 3ms
  `define XFIPCS_RX_WF_TIMER_MIN_32G         23'h40D990  // Twtf = 10ms
`else
  `define XFIPCS_RX_TQ_TIMER_MAX             19'h7270E  // Tqr  = 3ms
  `define XFIPCS_RX_WF_TIMER_MAX             21'h17D784 // Twtf = 10ms
  `define XFIPCS_RX_TW_TIMER_MAX             12'h704    // Twr  = 11.5us
`endif

// The Twr timer defined here is only used when a FEC is being used.
// For this value we need to take into account the latency through
// the FEC. The resulting value should be the IEEE specified value
// plus this latency + 50ns.
// Worse case latency per the IEEE spec is 6144BT or around 641ns.
// 10G: 13.7us + 0.641us + .05us =
// 16G: 12.3us + 0.614us + .05us =
// 32G: 5.7us + 0.614us + .05us =
`ifdef XFIPCS_16G32GFC
  `define XFIPCS_RX_TW_TIMER_MIN_BYPASS_16G_425M 13'h1586 // Tw = 12.964us
  `define XFIPCS_RX_TW_TIMER_MIN_BYPASS_16G_212M 13'hAC3  // Tw = 12.964us
  `define XFIPCS_RX_TW_TIMER_MIN_BYPASS_32G      13'hA91  // Tw = 6.364us
`else
  `define XFIPCS_RX_TW_TIMER_MAX_BYPASS          12'h8C8           // Twr  = 14.39us
`endif

// 10G: The following timer max values are given as clock cycles and
// assume a 299.52Mhz PMA_TX_CLK clock in WIS mode and a
// 322.265625Mhz clock otherwise. The relative times are defined
// in table 49-2 of the IEEE 802.3az spec.
// <IEEE specified time> * clock_rate = value
// 16G: The following timer max values are given as clock cycles and
// assume a 219.140625MHz PMA_TX_CLK_DIV2 clock. The relative times are defined
// in table 23 of the FC-FS-4 spec.
// <T11 specified time> * clock_rate = value
// 32G: The following timer max values are given as clock cycles and
// assume a 438.28125MHz PMA_TX_CLK_DIV2 clock. The relative times are defined
// in table 23 of the FC-FS-4 spec.
// <T11 specified time> * clock_rate = value
`ifdef XFIPCS_16G32GFC
  `define XFIPCS_TX_TS_TIMER_MAX_16G 11'h447         //Ts = 5us
  `define XFIPCS_TX_TQ_TIMER_MAX_16G 20'h5DA08       //Tq = 1.75ms
  `define XFIPCS_TX_TW_TIMER_MAX_16G 12'h837         //Tw = 9.6us
  `define XFIPCS_ONE_US_ALERT_TIMER_MAX_16G 10'h106  //1.2us
  `define XFIPCS_ONE_US_BYPASS_TIMER_MAX_16G 9'hDB   //1us
  `define XFIPCS_TX_TS_TIMER_MAX_32G 11'h1B6         //Ts = 1us
  `define XFIPCS_TX_TQ_TIMER_MAX_32G 20'hBB410       //Tq = 1.75ms
  `define XFIPCS_TX_TW_TIMER_MAX_32G 12'h6D9         //Tw = 4us
  `define XFIPCS_ONE_US_ALERT_TIMER_MAX_32G 10'h20D  //1.2us
  `define XFIPCS_ONE_US_BYPASS_TIMER_MAX_32G 9'h1B6  //1us
`else
  `ifdef XFIPCS_TOPLEVELNAME_WIS_ENABLED
   `define XFIPCS_TX_TS_TIMER_MAX 11'h5D8   // Tsl = 5us
   `define XFIPCS_TX_TQ_TIMER_MAX 20'h7FF7F // Tql = 1.75ms
   `define XFIPCS_TX_TW_TIMER_MAX 12'hCDD   // Tul = 11us
   `define XFIPCS_ONE_US_TIMER_MAX 9'h166   // 1.2us
  `else
   `define XFIPCS_TX_TS_TIMER_MAX 11'h64B   // Tsl = 5us
   `define XFIPCS_TX_TQ_TIMER_MAX 20'h89AFB // Tql = 1.75ms
   `define XFIPCS_TX_TW_TIMER_MAX 12'hDD7   // Tul = 11us
   `define XFIPCS_ONE_US_TIMER_MAX 9'h181   // 1.2us
  `endif
`endif

// This defines the minimum Tql that the attached Link Partner can have, and
// is defined in the 802.3az spec to be 1.7ms
// Altering this value will alter the HSS RXxQUIET/RXxREFRESH timing relationships.
// See section 5.1 in the core databook for more information.
// The value is given in 156.25Mhz XGMII_CLK cycles and is calculated as follows:
// Tql * clock_rate = value
// So in this case:
// 10G: 1.7ms * 156.25M = 256.625k = 0x40D99
// 16G: 1.7ms * 212.5M  = 361.25k  = 0x58322
// 16G: 1.7ms * 425M    = 722.5k   = 0xB0644
// 32G: 1.7ms * 425M    = 722.5k   = 0xB0644
`ifdef XFIPCS_16G32GFC
  `define XFIPCS_LP_TX_TQL_MIN_16G_425M 20'hB0644 // Tq = 1.7ms
  `define XFIPCS_LP_TX_TQL_MIN_16G_212M 20'h58322 // Tq = 1.7ms
  `define XFIPCS_LP_TX_TQL_MIN_32G      20'hB0644 // Tq = 1.7ms
`else
  `define XFIPCS_LP_TX_TQL_MIN 19'h40D99          // Tql = 1.7ms
`endif

//-----------------------------------------------------------------------------
// 8. Default timing parameters for the HSS QUIET and REFRESH signals.
// These values define the behavior of the HSS QUIET and REFRESH signals as
// the TX and RX flow through the various LPI states.
// See section 5.1 in the databook for more details.

// 32G: The TX values assume a 438.28125MHz PMA_TX_CLK_DIV2 clock.
// 10G: The TX values assume a 299.52Mhz PMA_TX_CLK clock in WIS mode
// and a 322.265625Mhz clock otherwise.
`ifdef XFIPCS_16G32GFC   //Default value only for 32G, need to program a suitable value from software interface for 16G
  `define XFIPCS_TX_HSS_T1_VALUE_DEFAULT 11'h0F2  // 550ns
  `define XFIPCS_TX_HSS_T2_VALUE_DEFAULT 16'h00F2 // 550ns
  `define XFIPCS_TX_HSS_T3_VALUE_DEFAULT 16'h01B7 // 1us
`else
  `ifdef XFIPCS_TOPLEVELNAME_WIS_ENABLED
   `define XFIPCS_TX_HSS_T1_VALUE_DEFAULT 11'h0A4  // 550ns
   `define XFIPCS_TX_HSS_T2_VALUE_DEFAULT 16'h00A4 // 550ns
   `define XFIPCS_TX_HSS_T3_VALUE_DEFAULT 16'h012B // 1us
  `else
   `define XFIPCS_TX_HSS_T1_VALUE_DEFAULT 11'h0B1 // 550ns
   `define XFIPCS_TX_HSS_T2_VALUE_DEFAULT 16'h00B1 // 550ns
   `define XFIPCS_TX_HSS_T3_VALUE_DEFAULT 16'h0142 // 1us
  `endif
`endif

// 32G: The RX values are given in cycles and assume a 425Mhz XGMII_CLK.
// 10G: The RX values are given in cycles and assume a 156.25Mhz XGMII_CLK.
`ifdef XFIPCS_16G32GFC   //Default value only for 32G, need to program a suitable value from software interface for 16G
  `define XFIPCS_RX_HSS_T1_BITS1716_VALUE_DEFAULT  2'h2     // 400us
  `define XFIPCS_RX_HSS_T1_BITS15TO0_VALUE_DEFAULT 16'h9810
  `define XFIPCS_RX_HSS_T3_VALUE_DEFAULT 16'h01A9           // 1us
  `define XFIPCS_RX_HSS_T6_BITS1716_VALUE_DEFAULT  2'h0     // 3.46us
  `define XFIPCS_RX_HSS_T6_BITS15TO0_VALUE_DEFAULT 16'h05BF
`else
  `define XFIPCS_RX_HSS_T1_VALUE_DEFAULT 16'hF424 // 400us
  `define XFIPCS_RX_HSS_T3_VALUE_DEFAULT 16'h0092 // 1us
  `define XFIPCS_RX_HSS_T6_VALUE_DEFAULT 16'h021C // 3.46us
`endif

//-------------------------------------------------------------------
// DO NOT EDIT BELOW THIS LINE
//-------------------------------------------------------------------
// The following code is used to support the choices selected above.
// If modified by the user, the results may be unpredictable.
//-------------------------------------------------------------------

//`define XFIPCS_TOPLEVELNAME_WAM_ON
//`define XFIPCS_TOPLEVELNAME_SHORT_BER_DELAY
