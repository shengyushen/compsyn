// Accellera Standard V1.6 Open Verification Library (OVL).
// Accellera Copyright (c) 2005-2006. All rights reserved.

vunit assert_one_cold_assert_vunit (assert_one_cold_assert)
{
  default clock = (posedge clk);

  property ASSERT_ONE_COLD_XZ_P = always (
          reset_n && xzcheck_enable ->
          ((test_expr ^ test_expr) == {width{1'b0}})); 

  property ASSERT_ONE_COLD_P = always (
          (reset_n && (test_expr ^ test_expr == {width{1'b0}}) && 
          !((inactive < 2) && (test_expr == {width{inactive_val}}))) ->//`OVL_ONE_COLD is defined as 2 in std_ovl_defines.h 
          (width == 1) ? (test_expr == 1'b0) : //for single bit test_expr or all bits asserted test_expr
          ((test_expr != {width{1'b1}}) &&     //the following logic does not hold for one cold
          ((~test_expr & (~test_expr - {{(width > 0 ? width - 1 : 1){1'b0}},1'b1})) == {width{1'b0}})));

  A_ASSERT_ONE_COLD_XZ_P:
  assert ASSERT_ONE_COLD_XZ_P
  report "VIOLATION: ASSERT_ONE_COLD Checker Fires : Test expression contains X/Z value";

  A_ASSERT_ONE_COLD_P:
  assert ASSERT_ONE_COLD_P
  report "VIOLATION: ASSERT_ONE_COLD Checker Fires : Test expression contains more or less than 1 deasserted bits";
}

vunit assert_one_cold_assume_vunit (assert_one_cold_assume)
{
  default clock = (posedge clk);

  property ASSERT_ONE_COLD_XZ_P = always (
          reset_n && xzcheck_enable ->
          ((test_expr ^ test_expr) == {width{1'b0}}));

  property ASSERT_ONE_COLD_P = always (
          (reset_n && (test_expr ^ test_expr == {width{1'b0}}) &&
          !((inactive < 2) && (test_expr == {width{inactive_val}}))) ->//`OVL_ONE_COLD is defined as 2 in std_ovl_defines.h
          (width == 1) ? (test_expr == 1'b0) : //for single bit test_expr or all bits asserted test_expr
          ((test_expr != {width{1'b1}}) &&     //the following logic does not hold for one cold
          ((~test_expr & (~test_expr - {{(width > 0 ? width - 1 : 1){1'b0}},1'b1})) == {width{1'b0}})));
                                                                                                                             
  M_ASSERT_ONE_COLD_XZ_P:
  assume ASSERT_ONE_COLD_XZ_P;
                                                                                                                             
  M_ASSERT_ONE_COLD_P:
  assume ASSERT_ONE_COLD_P;
}

vunit assert_one_cold_cover_vunit (assert_one_cold_cover)
{ 
  default clock = (posedge clk);

  cover_test_expr_change:
  cover {prev(reset_n) && reset_n && (test_expr != prev(test_expr))}
  report "COVERAGE REPORT : ASSERT_ONE_COLD Checker: test_expr_change covered";

  cover_test_expr_all_zeros:
  cover {reset_n && (inactive == 0) &&  //`OVL_ALL_ZEROS is defined as 0 in std_ovl_defines.h
         rose(test_expr == {width{inactive_val}})}
  report "COVERAGE REPORT : ASSERT_ONE_COLD Checker: test_expr_all_zeros covered";

  cover_test_expr_all_ones:
  cover {reset_n && (inactive == 1) && //`OVL_ALL_ONES is defined as 1 in std_ovl_defines.h
         rose(test_expr == {width{inactive_val}})}
  report "COVERAGE REPORT : ASSERT_ONE_COLD Checker: test_expr_all_ones covered";

  cover_all_one_colds_checked:
  cover {reset_n && rose(one_colds_checked == {width{1'b0}})}
  report "COVERAGE REPORT: ASSERT_ONE_COLD Checker: all_one_colds_checked covered";
}

