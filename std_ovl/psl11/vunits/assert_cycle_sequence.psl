// Accellera Standard V1.6 Open Verification Library (OVL).
// Accellera Copyright (c) 2005-2006. All rights reserved.

vunit assert_cycle_sequence_assert_vunit (assert_cycle_sequence_assert)
{
  default clock = (posedge clk);

  property ASSERT_SEQUENCE_TRIGGER_ON_MOST_P = always ( 
           {(necessary_condition == 0) && seq_queue[1]} |-> {event_sequence[0]}
           abort (!reset_n));

  property ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P = always ( //Pipelined or non-pipelined application, this property is the same
           {(necessary_condition == 1) || (necessary_condition == 2)} |->
           {!(&((seq_queue[num_cks-1:1] & event_sequence[num_cks-2:0]) | ~(seq_queue[num_cks-1:1]))) != 1'b1}
           abort(!reset_n)); 

  A_ASSERT_SEQUENCE_TRIGGER_ON_MOST_P:
  assert  ASSERT_SEQUENCE_TRIGGER_ON_MOST_P 
  report "VIOLATION: ASSERT_CYCLE_SEQUENCE Checker Fires: First num_cks-1 events occured but they are not followed by the last event in sequence";

  A_ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P:
  assert ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P 
  report "VIOLATION: ASSERT_CYCLE_SEQUENCE Checker Fires: First event occured but it is not followed by the rest of the events in sequence";
}

vunit assert_cycle_sequence_assume_vunit (assert_cycle_sequence_assume)
{
  default clock = (posedge clk);
                                                                                                                                                                 
  property ASSERT_SEQUENCE_TRIGGER_ON_MOST_P = always (
           {(necessary_condition  == 0) && seq_queue[1]} |-> {event_sequence[0]}
           abort(!reset_n));
                                                                                                                                                                 
  property ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P = always ( //Pipelined or non-pipelined application, this property is the same
           {(necessary_condition == 1) || (necessary_condition == 2)} |->
           {!(&((seq_queue[num_cks-1:1] & event_sequence[num_cks-2:0]) | ~(seq_queue[num_cks-1:1]))) != 1'b1}
           abort(!reset_n));
                                                                                                                                                                 
  M_ASSERT_SEQUENCE_TRIGGER_ON_MOST_P:
  assume  ASSERT_SEQUENCE_TRIGGER_ON_MOST_P;
                                                                                                                                                                 
  M_ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P:
  assume ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P;
}

vunit assert_cycle_sequence_cover_vunit (assert_cycle_sequence_cover)
{ 
  default clock = (posedge clk);

  cover_sequence:
  cover {reset_n &&
         (((necessary_condition  == 0) && (&(seq_queue[num_cks-1:1]))) ||
          (((necessary_condition == 1) || (necessary_condition == 2)) && event_sequence[num_cks-1]))}
  report "COVERAGE REPORT : ASSERT_CYCLE_SEQUENCE Checker: sequence covered";
}
 
