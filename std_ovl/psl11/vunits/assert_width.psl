// Accellera Standard V1.6 Open Verification Library (OVL).
// Accellera Copyright (c) 2005-2006. All rights reserved.

vunit assert_width_assert_vunit (assert_width_assert)
{
  default clock = (posedge clk);

  property ASSERT_WIDTH_MIN_CHECK_P = always (
           ({!test_expr;test_expr} |=>
           {test_expr[*min_cks]})
           abort(!reset_n));

  property ASSERT_WIDTH_MAX_CHECK_P = always (
           ({!test_expr;test_expr} |=> 
           {test_expr[*0:max_cks];!test_expr})
           abort (!reset_n));

  A_ASSERT_WIDTH_MIN_CHECK_P:
  assert ASSERT_WIDTH_MIN_CHECK_P 
  report "VIOLATION: ASSERT_WIDTH Checker Fires: Test expression was held TRUE for less than specified minimum min_cks cycles";

  A_ASSERT_WIDTH_MAX_CHECK_P:
  assert ASSERT_WIDTH_MAX_CHECK_P
  report "VIOLATION: ASSERT_WIDTH Checker Fires: Test expression was held TRUE for more than specified maximum max_cks cycles";
}

vunit assert_width_assume_vunit (assert_width_assume)
{
  default clock = (posedge clk);
                                                                                                                 
  property ASSERT_WIDTH_MIN_CHECK_P = always (
           ({!test_expr;test_expr} |=>
           {test_expr[*min_cks]})
           abort(!reset_n));
                                                                                                                                                                        
  property ASSERT_WIDTH_MAX_CHECK_P = always (
           ({!test_expr;test_expr} |=>
           {test_expr[*0:max_cks];!test_expr})
           abort (!reset_n));
                                                                                                                 
  M_ASSERT_WIDTH_MIN_CHECK_P:
  assume ASSERT_WIDTH_MIN_CHECK_P;
                                                                                                                 
  M_ASSERT_WIDTH_MAX_CHECK_P:
  assume ASSERT_WIDTH_MAX_CHECK_P;
}

vunit assert_width_cover_vunit (assert_width_cover)
{ 
  default clock = (posedge clk);

  cover_test_expr_asserts:
  cover {reset_n && rose(test_expr)}
  report "COVERAGE REPORT : ASSERT_WIDTH Checker: test_expr_asserts covered";

  cover_test_expr_asserted_for_min_cks:
  cover {(min_cks > 0) && reset_n && rose(test_expr);(reset_n && test_expr)[*(min_cks > 0 ? min_cks - 1 : 1)];reset_n && !test_expr}
  report "COVERAGE REPORT : ASSERT_WIDTH Checker: test_expr_asserted_for_min_cks covered";

  cover_test_expr_asserted_for_max_cks:
  cover {(max_cks > 0) && reset_n && rose(test_expr);(reset_n && test_expr)[*(max_cks > 0 ? max_cks - 1 : 1)];reset_n && !test_expr}
  report "COVERAGE REPORT : ASSERT_WIDTH Checker: test_expr_asserted_for_max_cks covered";
}
 
