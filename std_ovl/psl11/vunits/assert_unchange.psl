// Accellera Standard V1.6 Open Verification Library (OVL).
// Accellera Copyright (c) 2005-2006. All rights reserved.

vunit assert_unchange_assert_vunit (assert_unchange_assert)
{
  default clock = (posedge clk);

  property ASSERT_UNCHANGE_P = always (
           ({(num_cks > 0) && (ignore_new_start || error_on_new_start) &&
            start_event && !window} |=> //start_event is level sensitive in this checker
           {(test_expr == prev(test_expr))[*num_cks]})
           abort(!reset_n));
  
  property ASSERT_UNCHANGE_RESET_ON_START_P = always (
           {(num_cks > 0) && reset_on_new_start && start_event} |=>
            {(test_expr == prev(test_expr))[*]; !window}
            abort(!reset_n));

  property ASSERT_UNCHANGE_ERR_ON_START_P = always (
           reset_n && error_on_new_start && window -> !start_event);  

  A_ASSERT_UNCHANGE_P:
  assert ASSERT_UNCHANGE_P
  report "VIOLATION: ASSERT_UNCHANGE Checker Fires: Test expression changed value within num_cks from the start event asserted";

  A_ASSERT_UNCHANGE_RESET_ON_START_P:
  assert ASSERT_UNCHANGE_RESET_ON_START_P
  report "VIOLATION: ASSERT_UNCHANGE Checker Fires: Test expression changed value within num_cks from the start event asserted";

  A_ASSERT_UNCHANGE_ERR_ON_START_P:
  assert ASSERT_UNCHANGE_ERR_ON_START_P 
  report "VIOLATION: ASSERT_UNCHANGE Checker Fires : Illegal start event which has reoccured before completion of current window";
}

vunit assert_unchange_assume_vunit (assert_unchange_assume)
{
  default clock = (posedge clk);
  
  property ASSERT_UNCHANGE_P = always (
           ({(num_cks > 0) && (ignore_new_start || error_on_new_start) &&
            start_event && !window} |=>
           {(test_expr == prev(test_expr))[*num_cks]})
           abort(!reset_n));

  property ASSERT_UNCHANGE_RESET_ON_START_P = always (
           {(num_cks > 0) && reset_on_new_start && start_event} |=>
            {(test_expr == prev(test_expr))[*]; !window}
            abort(!reset_n));
 
  property ASSERT_UNCHANGE_ERR_ON_START_P = always ( 
           reset_n && error_on_new_start && window -> !start_event);
                                                                                                                                                       
  M_ASSERT_UNCHANGE_P:
  assume ASSERT_UNCHANGE_P;
                                                                                                                                                       
  M_ASSERT_UNCHANGE_RESET_ON_START_P:
  assume ASSERT_UNCHANGE_RESET_ON_START_P;
                                                                                                                                                       
  M_ASSERT_UNCHANGE_ERR_ON_START_P:
  assume ASSERT_UNCHANGE_ERR_ON_START_P;
}

vunit assert_unchange_cover_vunit (assert_unchange_cover)
{ 
  default clock = (posedge clk);

  cover_window_open:
  cover {reset_n && start_event && !window}
  report "COVERAGE REPORT : ASSERT_UNCHANGE Checker: window_open covered";
  
  cover_window_close:
  cover {reset_n && window && (window_close && ((!reset_on_new_start) || (!start_event)))}
  report "COVERAGE REPORT : ASSERT_UNCHANGE Checker: window_close covered";
                                                                                                                                     
  cover_window_resets:
  cover {reset_n && reset_on_new_start && start_event && window}
  report "COVERAGE REPORT : ASSERT_UNCHANGE Checker: window_resets covered";
}
 
